// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth
model User {
  id  String     @id @default(uuid())
  email String  @unique
  password  String
  name  String
  role Int @default(1)
  phone String
  sessions  Session[]
  passwordResetTokens  PasswordResetToken[]
  orders Order[]
  orderStatuses OrderStatus[]
  events Event[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

//domain
model Client {
  id String  @id @default(uuid())
  name String
  shortName String
  email String @unique
  phone String @unique
  destinations Destination[]
}


model Destination {
  id String  @id @default(uuid())
  country String
  address String
  postalCode String
  city String
  orders Order[]
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  @@unique([country, city, postalCode, address])
}

model ProductCategory {
  id String  @id @default(uuid())
  name String @unique
  color String @unique
  products Product[]
}

model Product {
  id String  @id @default(uuid())
  dimensions String
  variant String //variant of product (black, white_(wet|dry))
  itemsPerPackage Int //number of items per package
  volumePerPackage Decimal //m^3 per package
  category ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  stock Int
  orders ProductOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, dimensions, variant, itemsPerPackage])
}

model OrderStatus {
  id String  @id @default(uuid())
  status String @default("created")
  date DateTime @default(now())
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  orders Order @relation(fields: [orderId], references: [id])
  orderId Int
}

model Order{
  id Int  @id @default(autoincrement())
  destination Destination @relation(fields: [destinationId], references: [id])
  destinationId String
  date DateTime @default(now())
  statusHistory OrderStatus[]
  events Event[]
  files OrderFile[]
  products ProductOrder[]
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  profit Decimal?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transportCost TransportCost?
}

model OrderFile {
  key String @id @unique
  url String
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransportCost {
  id String  @id @default(uuid())
  price Decimal
  currency String

  order Order @relation(fields: [orderId], references: [id])
  orderId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOrder {
  id String  @id @default(uuid())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  product Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int
  price Decimal
  currency String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productExpanses ProductExpanse[]
}

model ProductExpanse {
  id String  @id @default(uuid())

  price Decimal
  currency String

  type String //type of expanses (commodity costs, saturation, wood finishing, marketer, other...)

  productOrder ProductOrder @relation(fields: [productOrderId], references: [id], onDelete: Cascade)
  productOrderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String  @id @default(uuid())
  title String
  description String
  startDate DateTime
  endDate DateTime
  order Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  creator User @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}