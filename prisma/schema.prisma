// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth
model User {
  id  String     @id @default(uuid())
  email String  @unique
  password  String
  name  String
  role Int @default(1)
  phone String
  sessions  Session[]
  passwordResetTokens  PasswordResetToken[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

//domain
model Client {
  id String  @id @default(uuid())
  name String 
  shortName String
  email String @unique
  phone String
  orders Order[]
}

model Commodity {
  id  String  @id @default(uuid())
  name String
  dimensions String
  stocks CommodityStock[]
}

model CommodityStock {
  id  String  @id @default(uuid())
  type String // "black" | "white_wet" | "white_dry"
  singlePackageVolume Decimal
  packagesAmount Int
  packageSize Int

  //we know what product it is
  commodity Commodity @relation(fields: [commodityId], references: [id], onDelete: Cascade)
  commodityId String

  //we know if this stock was ordered
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String?

  //we know if this stock is a part of magazine
  storage Storage? @relation(fields: [storageId], references: [id], onDelete: Cascade)
  storageId String?
}

model Order{
  id String  @id @default(uuid())
  client Client @relation(fields: [clientId], references: [id])
  clientId String
  destination Destination @relation(fields: [destinationId], references: [id])
  destinationId String
  date DateTime @default(now())
  status String
  stocks CommodityStock[]
  files String[]
  paidTransport Boolean
  paidOrder Boolean
  price Decimal
}

model Storage{
  id String  @id @default(uuid())
  stocks CommodityStock[]
}

model Destination {
  id String  @id @default(uuid())
  country String
  address String
  postalCode String
  city String
  orders Order[]
}